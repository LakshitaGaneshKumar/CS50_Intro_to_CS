sort1 uses: bubble sort

How do you know?: the upper bound increases as the number of numbers increases, but the lower bound stays pretty much the same, which shows that the sort is using bubble sort because if the list is already sorted, then it doesn't take as much time to sort because it just quits.

sort2 uses: merge sort

How do you know?: no matter what list I use (sorted, reversed, or random) of the same size, the program takes around the same amount of time to run. and it's faster than sort3, so this one should be merge sort

sort3 uses: selection sort

How do you know?: this was the slowest sort and the upper and lower bounds are pretty much the same, so it should be theta of n^2 for selection sort
